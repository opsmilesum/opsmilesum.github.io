<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Build your personal blog</title>
    <url>/2021/12/13/Build-your-personal-blog/</url>
    <content><![CDATA[<h1 id="Goal"><a href="#Goal" class="headerlink" title="Goal"></a>Goal</h1><p>This documentation is to introduce how to build your personal blog by <a href="https://git-scm.com/">Git</a> and <a href="https://hexo.io/zh-cn/">Hexo</a>.</p>
<h1 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h1><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install git</span><br></pre></td></tr></table></figure>

<h2 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h2><p>NPM is the package manager for Node.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install npm</span><br><span class="line">npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><p>Hexo is an open source, convenient framework to help you quickly build your blog.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<h1 id="Post-blog-Steps"><a href="#Post-blog-Steps" class="headerlink" title="Post blog Steps"></a>Post blog Steps</h1><h2 id="Initialization-Hexo"><a href="#Initialization-Hexo" class="headerlink" title="Initialization Hexo"></a>Initialization Hexo</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo init myblog&lt;your project name&gt;</span><br><span class="line">cd myblog</span><br><span class="line">npm install</span><br><span class="line">export PATH=$PATH:~/.nvm/versions/node/v12.16.0/bin</span><br></pre></td></tr></table></figure>

<h2 id="Create-new-page"><a href="#Create-new-page" class="headerlink" title="Create new page"></a>Create new page</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new &quot;MyFirstBlog&quot;&lt;your blog name&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> write your blog through *.md file.</span></span><br></pre></td></tr></table></figure>

<h3 id="Restart"><a href="#Restart" class="headerlink" title="Restart"></a>Restart</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure>

<h1 id="Onboard-Google-Search-Console"><a href="#Onboard-Google-Search-Console" class="headerlink" title="Onboard Google Search Console"></a>Onboard Google Search Console</h1><ol>
<li><p>Go to the <a href="https://search.google.com/search-console/welcome?utm_source=about-page">Search Console Page</a>.</p>
</li>
<li><p>Paste your url at <code>URL prefix</code>.</p>
</li>
<li><p>Download the Html file.</p>
</li>
<li><p>Put the download Html file under <code>source</code> directory.</p>
</li>
<li><p>Add the <code>layout</code> Head as below:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">layout: false</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">google-site-verification: google03c774646bdb5e4a.html</span><br></pre></td></tr></table></figure></li>
<li><p><code>hexo d -g</code></p>
</li>
<li><p>Verify at the Google Search Console.</p>
</li>
</ol>
<h2 id="Add-SiteMap"><a href="#Add-SiteMap" class="headerlink" title="Add SiteMap"></a>Add SiteMap</h2><p>Sitemap is to a file(Xml,etc.) to tell <code>GoogleSeaqrchEnginte</code> the structure information about the website.</p>
<h3 id="Generate-the-Sitemap-file"><a href="#Generate-the-Sitemap-file" class="headerlink" title="Generate the Sitemap file"></a>Generate the Sitemap file</h3><p>The <a href="https://github.com/hexojs/hexo-generator-sitemap">tool</a>.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install hexo-generator-sitemap --save</span></span><br></pre></td></tr></table></figure>

<p>Modify <code>themes/next_config.yml</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  #about: /about/ || user</span><br><span class="line">  tags: /tags/ || tags</span><br><span class="line">  categories: /categories/ || th</span><br><span class="line">  archives: /archives/ || archive</span><br><span class="line">  #schedule: /schedule/ || calendar</span><br><span class="line">  sitemap: /sitemap.xml || sitemap</span><br><span class="line">  #commonweal: /404/ || heartbeat</span><br></pre></td></tr></table></figure>

<p>Restart</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g</span><br></pre></td></tr></table></figure>

<p>Add the sitemap to google</p>
<ol>
<li>By web: <code>http://www.google.com/webmasters/tools/</code></li>
<li>By command line:</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl https://www.google.com/ping?sitemap=https://opsmilesum.github.io/sitemap</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Email Introduction</title>
    <url>/2021/12/16/Email-Introduction/</url>
    <content><![CDATA[<h2 id="Goal"><a href="#Goal" class="headerlink" title="Goal"></a>Goal</h2><p>Introduce how Email is implemented in current Internet and related tech-skills.</p>
<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p><img src="https://opsmilesum.github.io/2021/12/16/Email-Introduction/Email.png" alt="Strature"></p>
<h3 id="Email-Client"><a href="#Email-Client" class="headerlink" title="Email Client"></a>Email Client</h3><p>When a user wants to send/receive the email to/from a Email, he has to use the Email Cleint to interact with Email Server.</p>
<h3 id="SMTP-Server"><a href="#SMTP-Server" class="headerlink" title="SMTP Server"></a>SMTP Server</h3><p>SMTP is a protocol to transfer Email information.<br>For example, when a Email Client wants to send a Email to the Email Server, or a Email Server(@qq.com, etc.) want to send Email to another Email Server(@163.com, etc.)</p>
<h3 id="IMAP-POP3"><a href="#IMAP-POP3" class="headerlink" title="IMAP/POP3"></a>IMAP/POP3</h3><p>SMTP is responsible for sending email while IMAP/POP3 is responsbile for fetching Email.<br>Email Server builds a IMAP/POP3 Server to store emails, then the user can use the Email Client to access IMAP/POP3 Server to fetch Emails.</p>
]]></content>
      <tags>
        <tag>Email</tag>
      </tags>
  </entry>
  <entry>
    <title>Entity Lifecycle</title>
    <url>/2021/12/27/Entity-Lifecycle/</url>
    <content><![CDATA[<h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><h3 id="Persistence-Context"><a href="#Persistence-Context" class="headerlink" title="Persistence Context"></a>Persistence Context</h3><p><strong>Persistence Context</strong> is the middle layer between Database with Business Code. It’s a staging area for:</p>
<ul>
    <li>Convert the Database Row to Entity.</li>
    <li>Ready for the Client to read Entity.</li>
    <li>The alerted Entity by business code.</li>
</ul>

<h3 id="Lifecycle"><a href="#Lifecycle" class="headerlink" title="Lifecycle"></a>Lifecycle</h3><h4 id="Managed-Entity"><a href="#Managed-Entity" class="headerlink" title="Managed Entity"></a>Managed Entity</h4><p>A managed entity is a representation of a database table row.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Session session = sessionFactory.openSession();</span><br><span class="line">assertThat(getManagedEntities(session)).isEmpty();</span><br><span class="line"></span><br><span class="line">List&lt;FootballPlayer&gt; players = s.createQuery(<span class="string">&quot;from FootballPlayer&quot;</span>).getResultList();</span><br><span class="line"></span><br><span class="line">assertThat(getManagedEntities(session)).size().isEqualTo(<span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<h4 id="Detached-Entity"><a href="#Detached-Entity" class="headerlink" title="Detached Entity"></a>Detached Entity</h4><p>A detached entity is a Entity POJO corresponds to a decision table row, but not tracked by the Persistence Context.<br>A managed entity can converted into detached entity by below ways:</p>
<ol>
    <li>The Session creates the entity is closed.</li>
    <li>Call Session.evict(entity) or Session.clear()</li>
</ol>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FootballPlayer cr7 = session.get(FootballPlayer.class, <span class="number">1L</span>);</span><br><span class="line"></span><br><span class="line">assertThat(getManagedEntities(session)).size().isEqualTo(<span class="number">1</span>);</span><br><span class="line">assertThat(getManagedEntities(session).get(<span class="number">0</span>).getId()).isEqualTo(cr7.getId());</span><br><span class="line"></span><br><span class="line">session.evict(cr7);</span><br><span class="line"></span><br><span class="line">assertThat(getManagedEntities(session)).size().isEqualTo(<span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<p>But when <code>Session.update()</code> or <code>Session.merge()</code> called, the entity will be tracked by Persistence Context again.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FootballPlayer messi = session.get(FootballPlayer.class, <span class="number">2L</span>);</span><br><span class="line"></span><br><span class="line">session.evict(messi);</span><br><span class="line">messi.setName(<span class="string">&quot;Leo Messi&quot;</span>);</span><br><span class="line">transaction.commit();</span><br><span class="line"></span><br><span class="line">assertThat(getDirtyEntities()).isEmpty();</span><br><span class="line"></span><br><span class="line">transaction = startTransaction(session);</span><br><span class="line">session.update(messi);</span><br><span class="line">transaction.commit();</span><br><span class="line"></span><br><span class="line">assertThat(getDirtyEntities()).size().isEqualTo(<span class="number">1</span>);</span><br><span class="line">assertThat(getDirtyEntities().get(<span class="number">0</span>).getName()).isEqualTo(<span class="string">&quot;Leo Messi&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="Transient-entity"><a href="#Transient-entity" class="headerlink" title="Transient entity"></a>Transient entity</h3><p>A entity POJO that not exist in the Persistent Context store and not managed.<br>A typical example is to create a instance by constructor.<br>To make a transient entity persistent, we need to call <code>Session.save(entity)</code> or <code>Session.saveOrUpdate(entity)</code>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">FootballPlayer neymar = <span class="keyword">new</span> FootballPlayer();</span><br><span class="line">neymar.setName(<span class="string">&quot;Neymar&quot;</span>);</span><br><span class="line">session.save(neymar);</span><br><span class="line"></span><br><span class="line">assertThat(getManagedEntities(session)).size().isEqualTo(<span class="number">1</span>);</span><br><span class="line">assertThat(neymar.getId()).isNotNull();</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> count = queryCount(<span class="string">&quot;select count(*) from Football_Player where name=&#x27;Neymar&#x27;&quot;</span>);</span><br><span class="line"></span><br><span class="line">assertThat(count).isEqualTo(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">transaction.commit();</span><br><span class="line">count = queryCount(<span class="string">&quot;select count(*) from Football_Player where name=&#x27;Neymar&#x27;&quot;</span>);</span><br><span class="line"></span><br><span class="line">assertThat(count).isEqualTo(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<h3 id="Deleted-Entity"><a href="#Deleted-Entity" class="headerlink" title="Deleted Entity"></a>Deleted Entity</h3><p><code>Session.delete</code> is called.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">session.delete(neymar);</span><br><span class="line"></span><br><span class="line">assertThat(getManagedEntities(session).get(<span class="number">0</span>).getStatus()).isEqualTo(Status.DELETED);</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Database</tag>
      </tags>
  </entry>
  <entry>
    <title>Hibernate</title>
    <url>/2021/12/23/Hibernate/</url>
    <content><![CDATA[<h2 id="Introduce"><a href="#Introduce" class="headerlink" title="Introduce"></a>Introduce</h2><p>Hibernate is a ORM framework that implementes the JPA API.</p>
<h2 id="Use-Hibernate"><a href="#Use-Hibernate" class="headerlink" title="Use Hibernate"></a>Use Hibernate</h2><h3 id="Configure-Data-Source"><a href="#Configure-Data-Source" class="headerlink" title="Configure Data Source"></a>Configure Data Source</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;jdbc.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">DataSource <span class="title">createDataSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Create-SessionFactory"><a href="#Create-SessionFactory" class="headerlink" title="Create SessionFactory"></a>Create SessionFactory</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">LocalSessionFactoryBean <span class="title">createSessionFactory</span><span class="params">(<span class="meta">@Autowired</span> DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> props = <span class="keyword">new</span> Properties();</span><br><span class="line">        props.setProperty(<span class="string">&quot;hibernate.hbm2ddl.auto&quot;</span>, <span class="string">&quot;update&quot;</span>);</span><br><span class="line">        props.setProperty(<span class="string">&quot;hibernate.dialect&quot;</span>, <span class="string">&quot;org.hibernate.dialect.HSQLDialect&quot;</span>);</span><br><span class="line">        props.setProperty(<span class="string">&quot;hibernate.show_sql&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> sessionFactoryBean = <span class="keyword">new</span> LocalSessionFactoryBean();</span><br><span class="line">        sessionFactoryBean.setDataSource(dataSource);</span><br><span class="line">        <span class="comment">// Scan package to get entity class:</span></span><br><span class="line">        sessionFactoryBean.setPackagesToScan(<span class="string">&quot;com.itranswarp.learnjava.entity&quot;</span>);</span><br><span class="line">        sessionFactoryBean.setHibernateProperties(props);</span><br><span class="line">        <span class="keyword">return</span> sessionFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">HibernateTemplate <span class="title">createHibernateTemplate</span><span class="params">(<span class="meta">@Autowired</span> SessionFactory sessionFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HibernateTemplate(sessionFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">PlatformTransactionManager <span class="title">createTxManager</span><span class="params">(<span class="meta">@Autowired</span> SessionFactory sessionFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HibernateTransactionManager(sessionFactory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Create-Entity-Class"><a href="#Create-Entity-Class" class="headerlink" title="Create Entity Class"></a>Create Entity Class</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;...&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="meta">@Column(nullable = false, updatable = false)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(nullable = false, unique = true, length = 100)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(nullable = false, length = 100)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(nullable = false, length = 100)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(nullable = false, updatable = false)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getCreatedAt</span><span class="params">()</span> </span>&#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Save-Entity"><a href="#Save-Entity" class="headerlink" title="Save Entity"></a>Save Entity</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">register</span><span class="params">(String email, String password, String name)</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setEmail(email);</span><br><span class="line">    user.setPassword(password);</span><br><span class="line">    user.setName(name);</span><br><span class="line">    <span class="comment">// Don&#x27;t need to set id.s</span></span><br><span class="line">    hibernateTemplate.save(user);</span><br><span class="line">    System.out.println(user.getId());</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Database</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Multiple SSH keys Management</title>
    <url>/2021/12/14/Multiple-SSH-keys-Management/</url>
    <content><![CDATA[<h2 id="Goal"><a href="#Goal" class="headerlink" title="Goal"></a>Goal</h2><p>Use different ssh keys for different hosts in git.</p>
<h2 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h2><ol>
<li><p>Generate the keys.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;your_email@youremail.com&quot;</span><br></pre></td></tr></table></figure>
<p>Specify the new <code>id_rsa</code> path.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Enter file in which to save the key (/Users/user/.ssh/id_rsa): /Users/user/.ssh/id_rsa_company</span><br></pre></td></tr></table></figure></li>
<li><p>Evict the oudated Identity cache.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-add -D</span><br></pre></td></tr></table></figure></li>
<li><p>Add ssh key</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-add ~/.ssh/id_rsa</span><br><span class="line">ssh-add ~/.ssh/id_rsa_company</span><br></pre></td></tr></table></figure></li>
<li><p>Create ssh config.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ~/.ssh</span><br><span class="line">touch config</span><br></pre></td></tr></table></figure></li>
<li><p>Modify config.</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Company</span></span><br><span class="line"><span class="string">Host</span> <span class="string">Company</span></span><br><span class="line">    <span class="string">HostName</span> <span class="string">github.company.io</span></span><br><span class="line">    <span class="string">User</span> <span class="string">yourName</span></span><br><span class="line">    <span class="string">IdentityFile</span> <span class="string">~/.ssh/id_rsa_company</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Myself</span></span><br><span class="line"><span class="string">Host</span> <span class="string">Myself</span></span><br><span class="line">    <span class="string">HostName</span> <span class="string">github.com</span></span><br><span class="line">    <span class="string">User</span> <span class="string">opsmilesum</span></span><br><span class="line">    <span class="string">IdentityFile</span> <span class="string">~/.ssh/id_rsa</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Postgres</title>
    <url>/2021/12/14/Postgres/</url>
    <content><![CDATA[<h2 id="Init"><a href="#Init" class="headerlink" title="Init"></a>Init</h2><ol>
<li>Install<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install postgresql</span><br></pre></td></tr></table></figure></li>
<li>Initdb<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">initdb /usr/local/var/postgres</span><br></pre></td></tr></table></figure></li>
<li>Start<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/usr/local/opt/postgresql/bin/postgres -D /usr/local/var/postgres</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Update-schema"><a href="#Update-schema" class="headerlink" title="Update schema"></a>Update schema</h2><ol>
<li>Alter column<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">alter table &quot;table_v2&quot; alter column &quot;description&quot; type text;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <tags>
        <tag>Database</tag>
      </tags>
  </entry>
  <entry>
    <title>Stream-Programming</title>
    <url>/2021/12/23/Stream-Programming/</url>
    <content><![CDATA[<h2 id="Stream-supplier"><a href="#Stream-supplier" class="headerlink" title="Stream supplier"></a>Stream supplier</h2><p>Provide a not-closed <code>stream</code> every time.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Supplier&lt;Stream&lt;String&gt;&gt; streamSupplier = () -&gt; Stream.of(<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>);</span><br><span class="line">Optional&lt;String&gt; item = streamSupplier.get().findAndy();</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Transaction</title>
    <url>/2022/01/05/Transaction/</url>
    <content><![CDATA[<h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><p>Adding the <code>@Transactional</code> annotation at the class level or method level.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional(propagation = Propagation.SUPPORTS, readOnly = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PayServiceImpl</span> <span class="keyword">implements</span> <span class="title">IPayService</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 省略方法...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><p>Spring will create a <code>Proxy</code> class by AOP when detects the Annotated class/method runs, it will:</p>
<ol>
    <li>start the transaction</li>
    <li>run the business logic</li>
    <li>commit the transaction or rollback</li>
</ol>

<h2 id="Exception-handling"><a href="#Exception-handling" class="headerlink" title="Exception handling"></a>Exception handling</h2><p>If <code>RunTimeException</code> thrown, the <code>Proxy</code> will roll back the transaction, otherwise(no exception thrown or no-RunTimeException thrown), the <code>Proxy</code> will commit the transaction.<br>But you can also rollback the transaction by <code>rollbackFor</code> property, for example:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional(propagation= Propagation.REQUIRED, rollbackFor= PayException.class)</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>皮蛋辣椒</title>
    <url>/2022/01/08/%E7%9A%AE%E8%9B%8B%E8%BE%A3%E6%A4%92/</url>
    <content><![CDATA[<h2 id="食材"><a href="#食材" class="headerlink" title="食材"></a>食材</h2><p>辣椒切段, 大蒜切粒, 两到三个皮蛋.</p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li>锅开火不放油, 下辣椒加少量盐小火烤</li>
<li>烤至辣椒起虎皮后, 加入油和大蒜翻炒</li>
<li>加入皮蛋, 用铲子压碎后, 一起翻炒</li>
<li>加蚝油生抽翻炒出锅</li>
</ol>
<p><img src="https://opsmilesum.github.io/2022/01/08/%E7%9A%AE%E8%9B%8B%E8%BE%A3%E6%A4%92/pidan.jpeg" alt="皮蛋"></p>
]]></content>
      <tags>
        <tag>菜谱</tag>
      </tags>
  </entry>
  <entry>
    <title>酸辣罗氏虾</title>
    <url>/2022/01/10/%E9%85%B8%E8%BE%A3%E7%BD%97%E6%B0%8F%E8%99%BE/</url>
    <content><![CDATA[<h2 id="食材"><a href="#食材" class="headerlink" title="食材"></a>食材</h2><p>罗氏虾，蒜末，姜末，葱末, 小米椒</p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li>罗氏虾去虾线.</li>
<li>锅内加入宽油，待油温升至冒烟，将虾下去油锅(怕油溅的朋友可以把锅盖上).</li>
<li>炸至虾变色后捞出，剩下的虾油可以储存好，下次做菜用.</li>
<li>下一步锅内放油 、 蒜末、姜末 、 小米椒，爆香.</li>
<li>加入爆好的大虾翻炒均匀，加入半罐啤酒焖一下，锅内要剩余一些汁水.</li>
<li>加生抽调味出锅.<br>一道美味的油爆大虾就做好啦，汤汁拌饭也是一绝哦(๑•̀ㅂ•́)و✧</li>
</ol>
<p><img src="https://opsmilesum.github.io/2022/01/10/%E9%85%B8%E8%BE%A3%E7%BD%97%E6%B0%8F%E8%99%BE/luoshixia.jpeg" alt="罗氏虾"></p>
]]></content>
      <tags>
        <tag>菜谱</tag>
      </tags>
  </entry>
  <entry>
    <title>醋溜白菜</title>
    <url>/2021/12/19/%E9%86%8B%E6%BA%9C%E7%99%BD%E8%8F%9C/</url>
    <content><![CDATA[<h2 id="醋溜白茶"><a href="#醋溜白茶" class="headerlink" title="醋溜白茶"></a>醋溜白茶</h2><ol>
<li>调汁: 两勺陈醋, 一勺生抽, 一勺蚝油, 少许盐和鸡精, 半勺淀粉.</li>
<li>蒜切碎, 小米椒切圈.</li>
<li>白菜切段, 分开菜梗和菜叶.</li>
<li>锅中放大蒜和小米椒炒香.</li>
<li>放入菜梗炒至断生, 然后放入菜叶继续翻炒.</li>
<li>最后放入调好的汁, 即可出锅.</li>
</ol>
]]></content>
      <tags>
        <tag>菜谱</tag>
      </tags>
  </entry>
  <entry>
    <title>雪里蕻肉末</title>
    <url>/2021/12/13/%E9%9B%AA%E9%87%8C%E8%95%BB%E8%82%89%E6%9C%AB/</url>
    <content><![CDATA[<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li>雪里蕻洗干净</li>
<li>热水加盐加糖，下雪里蕻焯水</li>
<li>焯水 7 分钟，捞出</li>
<li>雪里蕻冲凉水，洗去盐分</li>
<li>先炒肉沫，再炒雪里蕻</li>
</ol>
]]></content>
      <tags>
        <tag>菜谱</tag>
      </tags>
  </entry>
</search>
